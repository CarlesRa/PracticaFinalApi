package com.carlesramos.services;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import org.glassfish.jersey.server.ResourceConfig;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.query.Query;

import com.carlesramos.hibernateutility.HibernateUtil;
import com.google.gson.Gson;

import model.Cartas;
import model.Jugadores;
import model.Partidas;


@Path("/inicio")
public class PartidaApi extends ResourceConfig{
	
	private static final int JUGADOR_1 = 1;
	private static final int JUGADOR_2 = 2;
	
	//Variables hibernate
	private SessionFactory sFactory;
	private Session session;
	private Transaction transaction;
	
	private Cartas cartaA;
	private Cartas cartaB;
	//ArrayList<Cartas> cartas;
	
	//GET METHODS
	
	@GET
	@Path("/saluda")
	public String saluda() {
		return "Bienvenido!!";
	}
	
	@GET
	@Path("/nickNameExists/{a}")
	@Produces(MediaType.TEXT_PLAIN)
	public boolean nickNameExist(@PathParam("a")String nickName) {
		sFactory = HibernateUtil.getSessionFactory();
		session = sFactory.openSession();
		Query query = session.createQuery("from Jugadores where nickName = :nickName");
		query.setParameter("nickName", nickName);
		List<?> list = query.getResultList();
		if (list.size() == 0) {
			return false;
		}
		else return true;
	}
	
	@GET
	@Path("/elegirJugador")
	@Produces(MediaType.TEXT_PLAIN)
	public String getJugadorInicial() {
		Random rnd = new Random();
		return String.valueOf(rnd.nextInt(2));
	}
	
	@GET
	@Path("/comprobarJugada/{jugadorA}/{cartaJugadorA}/{caracteristica}/{jugadorB}"
			+ "/cartaJugadorB")
	@Produces(MediaType.TEXT_PLAIN)
	public int comprobarJugada(@PathParam("cartaJugadorA")int idCartaA,
			@PathParam("caracteristica")String caracteristica,
			@PathParam("cartaJugadorB")int idCartaB){
		int resultado;
		sFactory = HibernateUtil.getSessionFactory();
		session = sFactory.openSession();
		Query query= session.createQuery("from Cartas where idCarta = :idCarta");
		query.setParameter("idCarta", idCartaA);
		List<?>cartasA = query.getResultList();
		if (cartasA != null) {
			cartaA = (Cartas)cartasA.get(0);
		}
		else return -1;
		query = session.createQuery("from cartas where idCarta = :idCarta");
		query.setParameter("idCarta", idCartaB);
		List<?>cartasB = query.getResultList();
		if (cartasB != null) {
			cartaB = (Cartas)cartasA.get(0);
		}
		else return -1;
		
		switch (caracteristica) {
			case "Motor" : {
				if (cartaA.getMotor() < cartaB.getMotor()) {
					return JUGADOR_2;
				}
				else return JUGADOR_1;
			}
			case "Potencia" : {
				if (cartaA.getPotenciaKv() < cartaB.getPotenciaKv()) {
					return JUGADOR_2;
				}
				else return JUGADOR_1;
			}
			case "Velocidad" : {
				if (cartaA.getVelocidad() < cartaB.getVelocidad()) {
					return JUGADOR_2;
				}
				else return JUGADOR_1;
			}
			case "Cilindros" : {
				if (cartaA.getNumCilindros() < cartaB.getNumCilindros()) {
					return JUGADOR_2;
				}
				else return JUGADOR_1;
			}
			case "Revoluciones" : {
				if (cartaA.getRevoluciones() < cartaB.getRevoluciones()) {
					return JUGADOR_1;
				}
				else return JUGADOR_2;
			}
			case "Consumo" : {
				if (cartaA.getConsumo() < cartaB.getConsumo()) {
					return JUGADOR_1;
				}
				else return JUGADOR_2;
			}
		}
		return -1;
		
	}
	
	//POST METHODS
	
	@POST
	@Path("/insertarJugador")
	@Consumes(MediaType.APPLICATION_JSON)
	public void insertJugador(String jSonJugador){
		sFactory = HibernateUtil.getSessionFactory();
		session = sFactory.openSession();
		transaction = session.beginTransaction();
		Gson gson = new Gson();
		Jugadores jugador = gson.fromJson(jSonJugador, Jugadores.class);
		session.save(jugador);
		transaction.commit();
	}
	
	@POST
	@Path("/nuevaPartida")
	@Consumes(MediaType.APPLICATION_JSON)
	public void nuevaPartida(String jsonPartida) {
		sFactory = HibernateUtil.getSessionFactory();
		session = sFactory.openSession();
		transaction = session.beginTransaction();
		Gson gson = new Gson();
		Partidas partida = gson.fromJson(jsonPartida, Partidas.class);
		session.save(partida);
		transaction.commit();
	}
	
	@POST
	@Path("/insertarCarta")
	@Consumes(MediaType.APPLICATION_JSON)
	public void insertarCarta(String jsonCarta) {
		sFactory = HibernateUtil.getSessionFactory();
		session = sFactory.openSession();
		transaction = session.beginTransaction();
		Gson gson = new Gson();
		Cartas carta = gson.fromJson(jsonCarta, Cartas.class); 
		session.save(carta);
		transaction.commit();
	}
}
