package com.carlesramos.services;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import org.glassfish.jersey.server.ResourceConfig;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import com.carlesramos.hibernateutility.HibernateUtil;
import com.google.gson.Gson;
import model.Cartas;
import model.Jugadores;
import model.Partidas;
import java.util.UUID;

@Path("/inicio")
public class PartidaApi extends ResourceConfig{
	
	private static final int EMPATE = 0;
	private static final int JUGADOR_1 = 1;
	private static final int JUGADOR_2 = 2;
	private static final String LOGIN_FAIL = "Login_fail";
	private static final int MAX_RONDAS = 6;
	
	//Variables hibernate
	private SessionFactory sFactory;
	private Session session;
	private Transaction transaction;
	
	//Variables juego
	private Cartas cartaA;
	private Cartas cartaB;
	private int numVictoriasJugadorA = 0;
	private int numVictoriasJugadorB = 0;
	private Jugadores jugador1;
	private Jugadores jugador2;
	private Partidas partida;
	//ArrayList<Cartas> cartas;
	
	//GET METHODS
	
	@GET
	@Path("/saluda")
	public String saluda() {
		return "Bienvenido!!";
	}
	
	@GET
	@Path("/nickNameExists/{a}")
	@Produces(MediaType.TEXT_PLAIN)
	public boolean nickNameExist(@PathParam("a")String nickName){
		sFactory = HibernateUtil.getSessionFactory();
		session = sFactory.openSession();
		Query query = session.createQuery("from Jugadores where nickName = :nickName");
		query.setParameter("nickName", nickName);
		List<?> list = query.getResultList();
		if (list.size() == 0) {
			return false;
		}
		else return true;
	}
	
	@GET
	@Path("/validarLogin")
	@Produces(MediaType.TEXT_PLAIN)
	public String dataIsCorrect(@QueryParam("nickName")String nickName,
			@QueryParam("password")String password){
		sFactory = HibernateUtil.getSessionFactory();
		session = sFactory.openSession();
		Query query = session.createQuery("from Jugadores where nickName = :nickName"
				+ "and password = :password");
		query.setParameter("nickName", nickName);
		query.setParameter("password", password);
		List<?> list = query.getResultList();
		if (list.size() > 0) {
			String uuidSession = UUID.randomUUID().toString();
			return uuidSession;
		}
		else return LOGIN_FAIL;
	}
	
	@GET
	@Path("/elegirJugador")
	@Produces(MediaType.TEXT_PLAIN)
	public String getJugadorInicial() {
		Random rnd = new Random();
		return String.valueOf(rnd.nextInt(2));
	}
	
	@GET
	@Path("/obtenerCartas")
	@Produces(MediaType.APPLICATION_JSON)
	public String obtenerCartas() {
		ArrayList<Cartas> cartasObtenidas = null;
		Gson g = new Gson();
		sFactory = HibernateUtil.getSessionFactory();
		session = sFactory.openSession();
		Query query= session.createQuery("from Cartas");
		cartasObtenidas = (ArrayList<Cartas>)query.getResultList();
		session.close();
		return g.toJson(cartasObtenidas);
	}
	
	@GET
	@Path("/comprobarJugada")
	@Produces(MediaType.TEXT_PLAIN)
	public int comprobarJugada(@QueryParam("idSession")String idSession,
			@QueryParam("idJugadorA")int idJugadorA,
			@QueryParam("cartaJugadorA")int idCartaA,
			@QueryParam("caracteristica")String caracteristica,
			@QueryParam("idJugadorB")int idJugadorB,
			@QueryParam("cartaJugadorB")int idCartaB, @QueryParam("ronda")int ronda){
		
		int resultado = -1;
		
		sFactory = HibernateUtil.getSessionFactory();
		session = sFactory.openSession();
		
		//Arreplegue la carta del jugador A
		Query query= session.createQuery("from Cartas where idCarta = :idCarta");
		query.setParameter("idCarta", idCartaA);
		List<?>cartasA = query.getResultList();
		if (cartasA != null) {
			cartaA = (Cartas)cartasA.get(0);
		}
		else return -1;
		
		//Arerplegue la carta del jugador B
		query = session.createQuery("from cartas where idCarta = :idCarta");
		query.setParameter("idCarta", idCartaB);
		List<?>cartasB = query.getResultList();
		if (cartasB != null) {
			cartaB = (Cartas)cartasA.get(0);
		}
		else return -1;
		
		//Comprove la jugada segons el atribut seleccionat
		switch (caracteristica) {
			case "Motor" : {
				if (cartaA.getMotor() < cartaB.getMotor()) {
					resultado = JUGADOR_2;
				}
				else if (cartaA.getMotor() == cartaB.getMotor()) {
					resultado = EMPATE;
				}
				else resultado = JUGADOR_1;
				break;
			}
			case "Potencia" : {
				if (cartaA.getPotenciaKv() < cartaB.getPotenciaKv()) {
					resultado = JUGADOR_2;
				}
				else if (cartaA.getPotenciaKv() == cartaB.getPotenciaKv()) {
					resultado = EMPATE;
				}
				else resultado = JUGADOR_1;
				break;
			}
			case "Velocidad" : {
				if (cartaA.getVelocidad() < cartaB.getVelocidad()) {
					resultado = JUGADOR_2;
				}
				else if (cartaA.getVelocidad() == cartaB.getVelocidad()) {
					resultado = EMPATE;
				}
				else resultado = JUGADOR_1;
				break;
			}
			case "Cilindros" : {
				if (cartaA.getNumCilindros() < cartaB.getNumCilindros()) {
					resultado = JUGADOR_2;
				}
				else if (cartaA.getNumCilindros() == cartaB.getNumCilindros()) {
					resultado = EMPATE;
				}
				else resultado = JUGADOR_1;
				break;
			}
			case "Revoluciones" : {
				if (cartaA.getRevoluciones() < cartaB.getRevoluciones()) {
					resultado = JUGADOR_1;
				}
				else if (cartaA.getRevoluciones() == cartaB.getRevoluciones()) {
					resultado = EMPATE;
				}
				else resultado = JUGADOR_2;
				break;
			}
			case "Consumo" : {
				if (cartaA.getConsumo() < cartaB.getConsumo()) {
					resultado = JUGADOR_1;
				}
				else if (cartaA.getConsumo() == cartaB.getConsumo()) {
					resultado = EMPATE;
				}
				else resultado = JUGADOR_2;
				break;
			}
		}
		
		//Faig el update de rondes guanyades de la carta
		transaction = session.beginTransaction();
		if (resultado == JUGADOR_1) {
			cartaA.setRondasGanadas(cartaA.getRondasGanadas() + 1);
			numVictoriasJugadorA++;
			session.update(cartaA);
		}
		else if (resultado == JUGADOR_2) {
			cartaB.setRondasGanadas(cartaB.getRondasGanadas() + 1);
			numVictoriasJugadorB++;
			session.update(cartaB);
		}
		transaction.commit();
		
		//Si estem en la ultima ronda decidim el guanyador
		if(ronda == MAX_RONDAS) {
			
			query = session.createQuery("from Jugadores where idJugador = :idJugador");
			query.setParameter("idJugador", idJugadorA);
			List<?>jugadorA = query.getResultList();
			if (jugadorA != null) {
				jugador1 = (Jugadores)jugadorA.get(0);
			}	
			
			query = session.createQuery("from Jugadores where idJugador = :idJugador");
			query.setParameter("idJugador", idJugadorB);
			List<?>jugadorB = query.getResultList();
			if (jugadorB != null) {
				jugador2 = (Jugadores)jugadorA.get(0);
			}	
			
			query = session.createQuery("from Partidas where idSession = :idJugador");
			query.setParameter("idSession", idSession);
			List<?>p = query.getResultList();
			if (p != null) {
				partida = (Partidas)p.get(0);
			}
			
			if (numVictoriasJugadorA > numVictoriasJugadorB) {
				
				if (jugadorA != null) {
					jugador1.setGanadas(jugador1.getGanadas() + 1);
					partida.setGanador(jugador1.getIdJugador());
					session.update(jugador1);
					session.update(partida);
					transaction.commit();
					session.close();
					return JUGADOR_1;
				}
			}
			else if(numVictoriasJugadorA == numVictoriasJugadorB) {
				jugador1.setEmpatadas(jugador1.getEmpatadas() + 1);
				jugador2.setEmpatadas(jugador2.getEmpatadas() + 1);
				session.update(jugador1);
				session.update(jugador2);
				transaction.commit();
				session.close();
				return EMPATE;
			}
			else {
				jugador2.setGanadas(jugador2.getGanadas() + 1);
				partida.setGanador(jugador2.getIdJugador());
				session.update(jugador2);
				session.update(partida);
				transaction.commit();
				session.close();
				return JUGADOR_2;
			}
		}
		session.close();
		return resultado;
		
	}
	
	//DEURIA FER LA FINALITZACIÃ“ DE LA PARTIDA ACI PERO NO SE COM FER-HO
	/*@GET
	@Path("/resultadoPartida")
	@Produces(MediaType.TEXT_PLAIN)
	public void resultadoPartida(@QueryParam("numVictoriasJugadorA")int numVictoriasA,
			@QueryParam("numVictoriasJugadorB")int numVictoriasB) {
		
	}*/
	
	//POST METHODS
	
	@POST
	@Path("/insertarJugador")
	@Consumes(MediaType.APPLICATION_JSON)
	public void insertJugador(String jSonJugador){
		sFactory = HibernateUtil.getSessionFactory();
		session = sFactory.openSession();
		transaction = session.beginTransaction();
		Gson gson = new Gson();
		Jugadores jugador = gson.fromJson(jSonJugador, Jugadores.class);
		session.save(jugador);
		transaction.commit();
		session.close();
	}
	
	@POST
	@Path("/nuevaPartida")
	@Consumes(MediaType.APPLICATION_JSON)
	public void nuevaPartida(String jsonPartida) {
		sFactory = HibernateUtil.getSessionFactory();
		session = sFactory.openSession();
		transaction = session.beginTransaction();
		Gson gson = new Gson();
		Partidas partida = gson.fromJson(jsonPartida, Partidas.class);
		session.save(partida);
		transaction.commit();
		session.close();
	}
	
	@POST
	@Path("/insertarCarta")
	@Consumes(MediaType.APPLICATION_JSON)
	public void insertarCarta(String jsonCarta) {
		sFactory = HibernateUtil.getSessionFactory();
		session = sFactory.openSession();
		transaction = session.beginTransaction();
		Gson gson = new Gson();
		Cartas carta = gson.fromJson(jsonCarta, Cartas.class); 
		session.save(carta);
		transaction.commit();
		session.close();
	}
}
